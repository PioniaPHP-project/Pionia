<?php

namespace Pionia\Pionia\Middlewares;

use Exception;
use Pionia\Pionia\Base\PioniaApplication;
use Pionia\Pionia\Contracts\MiddlewareContract;
use Pionia\Pionia\Http\Request\Request;
use Pionia\Pionia\Http\Response\Response;
use Pionia\Pionia\Utils\Arrayable;
use Pionia\Pionia\Utils\Containable;
use Pionia\Pionia\Utils\Microable;
use Pionia\Pionia\Utils\Support;

class MiddlewareChain
{

    use Microable, Containable;

    private Arrayable $middlewareContainer;
    /**
     * Add a middleware to the middleware chain
     *
     * @param string $middleware
     * @return MiddlewareChain
     */
    public function add(string $middleware): static
    {
        $this->middlewareContainer->add($middleware);
        return $this;
    }

    public function __construct(PioniaApplication $app)
    {
        $this->context = $app->context;
        $this->middlewareContainer = $this->getOrDefault('middlewares', new Arrayable([]));
    }

    /**
     * Get the middleware chain
     *
     * @return array
     */
    public function get(): array
    {
        return $this->middlewareContainer->all();
    }

    /**
     * Add a middleware to the middleware chain after a specific middleware
     *
     * @param string $middlewareSearch The target middleware in the chain
     * @param string $middlewareToInsert The new middleware we are registering
     * @return MiddlewareChain
     */
    public function addAfter(string $middlewareSearch, string $middlewareToInsert): static
    {
        $this->middlewareContainer->addAfter($middlewareSearch, $middlewareToInsert);
        $this->context->set('middlewares', $this->middlewareContainer);
        return $this;
    }

    /**
     * Add a middleware before another middleware
     *
     * @param string $middlewareSearch The target middleware in the chain
     * @param string $middlewareToInsert The new middleware we are registering
     * @return MiddlewareChain
     * @throws Exception
     */
    public function addBefore(string $middlewareSearch, string $middlewareToInsert): static
    {
        if ($this->isAMiddleware($middlewareToInsert)) {
            $this->middlewareContainer->addBefore($middlewareSearch, $middlewareToInsert);
            $this->context->set('middlewares', $this->middlewareContainer);
        } else {
            throw new Exception("Middleware must be implementing MiddlewareContract or extending Middleware");
        }
        return $this;
    }

    /**
     * Run the middleware chain
     *
     * @param Request $request
     * @param Response $response
     */
    public function rail(Request $request, Response $response): void
    {
        $current = $this->middlewareContainer->shift();
        if ($this->isAMiddleware($current)) {
            $firstMiddleware = $this->asMiddleware($current);
            $firstMiddleware->execute($request, $response, $this);
        } else {
            $this->next($request, $response, $this);
        }

    }

    /**
     * Run the next middleware in the chain
     */
    public function next(Request $request, Response $response, MiddlewareChain $chain): void
    {
        $chain->rail($request, $response);
    }


    private function isAMiddleware($class): bool
    {
        return Support::implements($class, MiddlewareContract::class) || Support::extends($class, Middleware::class);
    }

    private function asMiddleware($klass): MiddlewareContract
    {
        return new $klass();
    }


}
